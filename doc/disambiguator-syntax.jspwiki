
      I N A R I   S A A M I   D I S A M B I G U A T O R               






!!!DELIMITERS 

Sentence delimiters are the following: <.> <!> <?> <...> <¶>


!!!TAGS AND SETS



!!Tags


This section lists all the tags inherited from the fst, and used as tags
in the syntactic analysis. The next section, __Sets__, contains sets defined
on the basis of the tags listed here, those set names are not visible in the output.




!Beginning and end of sentence
BOS 
EOS



!Parts of speech tags

N
A
Adv
V
Pron
CS
CC
CC-CS
Po
Pr
Pcle
Num
Interj
ABBR
ACR
CLB
LEFT
RIGHT
WEB
QMARK
PPUNCT 

PUNCT

COMMA
¶



!Tags for POS sub-categories

Pers
Dem
Interr
Indef
Recipr
Refl
Rel
Coll
NomAg
Prop
Arab
Romertall

!Tags for morphosyntactic properties

Nom
Acc
Gen
Ill
Loc
Com
Ess
Par
Sg
Du
Pl
Cmp/SplitR
Cmp/SgNom Cmp/SgGen
Cmp/SgGen
Cmp/Attr
PxSg1
PxSg2
PxSg3
PxDu1
PxDu2
PxDu3
PxPl1
PxPl2
PxPl3
Px

Comp
Superl
Attr
Ord
Qst
IV
TV 
Prt
Prs
Ind
Pot
Cond
Imprt

Sg1
Sg2
Sg3
Du1
Du2
Du3
Pl1
Pl2
Pl3

Inf
ConNeg
Neg
PrfPrc
VGen
PrsPrc
Ger
Sup
Actio
VAbess

!Tags for clitic particles

Foc/ba
Foc/be
Foc/ba
Foc/be
Foc/be
Foc/ges
Foc/ges
Foc/ges
Foc/gis
Foc/gis
Foc/gis
Foc/han
Foc/han
Foc/uv
Foc/son
Foc/uv


!Derivation tags

Der/PassL Der/PassS
Der/NomAg
NomAg
Der/AAdv
Der/ag
Der/ahasas
Der/adda
Der/alla
Der/Car
Der/Caus
Der/d
Der/Dimin
Der/InchL
Der/ivvaas
Der/l
Der/laakan
Der/lasj
Der/mas
Der/NomAct
Der/sasj
Der/st
Der/t
Der/tt
Der/taa
Der/upmi
Der/vualasas
Der/vuota
Der/Date
Der/Year
Der/Hum
Der/Lang
Der/Domain
Der/Feat-phys
Der/Clth
Der/Body
Der/Act

<vdic>


Err/Orth



!Semantic tags

Sem/Ani
Sem/Fem
Sem/Group
Sem/Mal
Sem/Measr
Sem/Money
Sem/Obj
Sem/Obj-el
Sem/Org
Sem/Perc-emo
Sem/Plc
Sem/Sign
Sem/State-sick
Sem/Sur
Sem/Time
Sem/Txt

HUMAN

HAB-ACTOR
HAB-ACTOR-NOT-HUMAN


PROP-ATTR
PROP-SUR



TIME-N-SET
NOT-TIME
TIME-N



! Syntactic tags

@+FAUXV
@+FMAINV
@-FAUXV
@-FMAINV
@-FSUBJ>
@-F<OBJ
@-FOBJ>
@-FSPRED<OBJ
@-F<ADVL
@-FADVL>
@-F<SPRED
@-F<OPRED
@-FSPRED>
@-FOPRED>
@>ADVL
@ADVL<
@<ADVL
@ADVL>
@ADVL
@HAB>
@<HAB
@>N
@Interj
@N<
@>A
@P<
@>P
@HNOUN
@INTERJ
@>Num
@Pron<
@>Pron
@Num<
@OBJ
@<OBJ
@OBJ>
@OPRED
@<OPRED
@OPRED>
@PCLE
@COMP-CS<
@SPRED
@<SPRED
@SPRED>
@SUBJ
@<SUBJ
@SUBJ>
SUBJ
SPRED
OPRED
@PPRED
@APP
@APP-N<
@APP-Pron<
@APP>Pron
@APP-Num<
@APP-ADVL<
@VOC
@CVP
@CNP
OBJ
<OBJ
OBJ>
<OBJ-OTHERS
OBJ>-OTHERS
SYN-V
@X





!!Sets containing sets of lists and tags

This part of the file lists a large number of sets based partly upon the tags defined above, and 
partly upon lexemes drawn from the lexicon.
See the sourcefile itself to inspect the sets, what follows here is an overview of the set types.



!Sets for Single-word sets

OKTA and go, and the set INITIAL for initial letters 
go
INITIAL


!Sets for word or not

WORD
REAL-WORD
REAL-WORD-NOT-ABBR
WORD-NOT-de
NOT-COMMA


!Derivational affixes

DER-V

DER-N

DER-A1
DER-A

A-V

A-NOT-V






!Case sets

ADLVCASE


CASE-HALFAGREEMENT
CASE-AGREEMENT
CASE

NOT-NOM
NOT-GEN
NOT-ACC

!Verb sets


NOT-V

!Sets for finiteness and mood

REAL-NEG

MOOD-V

GC

VFIN

VFIN-POS

VFIN-NOT-IMPRT

VFIN-NOT-NEG

NOT-PRFPRC


!Sets for person


SG1-V
SG2-V
SG3-V
DU1-V
DU2-V
DU3-V
PL1-V
PL2-V
PL3-V

POSITIVE-V





!Sets consisting of forms of "leđe" (these ones need to be rewritten)




!Pronoun sets



















!Adjectival sets and their complements









!Adverbial sets and their complements










!Sets for coordinators









!Sets for adverbs that have lookalikes
Here come some adverbs that have identical twins in other POS. 
If these are found in Adv contexts, we treat them as adverbs.





!Sets of elements with common syntactic behaviour


!Sets for verbs


V is all readings with a V tag in them, REAL-V should
be the ones without an N tag following the V.  
The REAL-V set thus awaits a fix to the preprocess V ... N bug.



* The set COPULAS is for predicative constructions














TRANS-V is the set for verbs really taking objects




* Sets for verbs choosing oblique objects or adverbials
* __STVLIST__ is the list of strictly transitive verbs. In the rules, refer not to STVLIST, but to the set STV defined below.



STRICT-TRANS-V is the set for verbs which don't let a GenAcc be a modifier of anything else than an object, e.g. Mun organiseren eatni gievkkanis. - eatni wants to be the object
























!Valency sets




















































* __PLACE-V__ Those get only not locative if the target is a member TOOL, ABSTR-TOOL or ANIMATE or CONCEPT. Selects more locatives than ONLY-PLACE-LOC-V 





















!Adverb sets









!Adjective sets






















!NP sets defined according to their morphosyntactic features









!The PRE-NP-HEAD family of sets

These sets model noun phrases (NPs). The idea is to first define whatever can
occur in front of the head of the NP, and thereafter negate that with the
expression __WORD - premodifiers__.











The set __NOT-NPMOD__ is used to find barriers between NPs.
Typical usage: ... (*1 N BARRIER NPT-NPMOD) ...
meaning: Scan to the first noun, ignoring anything that can be
part of the noun phrase of that noun (i.e., "scan to the next NP head")






!Other negatively defined morphosyntactic noun sets












!Noun sets

Nominal sets defined according to their morphophonological properties
Sets for lexeme homonymy (most of them are moved to where the actual rules are.)


The words in the set __N-PO__ can be both N and Po, the set takes that into account.



!Nominal sets defined according to their semantical properties


* Spatial noun sets. These nouns behave like postpositions




* Time sets

































* Amount sets
















OKTA




* Sets for nouns with morpho-syntactic preferences

* Number-related sets






* Sets for case, possessive, etc.













* Sets for nouns as pred








































* Sets for animals













* Sets for things

















* Sets for qualities


* Sets for things, not necessarily tools


















* Sets for things such that people can be inside them:

* Sets for things such that people cannot be inside them:






* Part-whole sets for human




* Sets for places






























* Sets that can both be buildings/places and represent humans























































* Sets denoting relations





!Miscellaneous sets

















!Border sets and their complements














!Syntactic sets

ALLSYNTAG

''These were the set types.''


!!!RULE SECTION
Here follow the rules.



This is the first section. Here we put safe rules with no or minimal context.

* __Insertwww__ Inserts the Sem/Adr tag to all url expressions

* __ArabNom__ says that sentence-initial Arabic numeral is Nom unless followed by Po

* __Arab1__ says that "1" is Nom, look at this

* __ArabNomPlc__ gives Nom tu numerls following placenames

* __Arab__ rule for Apertium


* __mustalid__ adds <vdic> to language of telling and quoting, like: ... dadjá Aili Kestkitalo.


* __PlcSur1__ The Linda Englad rule: name is Sur not Plc if having a surname

* __PlcSur2__


* __PlcSur4__


!!Focus clitics
* __Qst__ removes Foc/uv if Qst and "?" at the ende of the sentence
* __FocUv__ is the revert rule, it removes  Qst for Foc/uv if there is no "?"

* __NoWackern__ says that if the word is not number 2 in the sentence it is not Foc (todo: phrase level, not word)



!!SECTION 2, more context


!!Numerals


* __NumRom__ in beginning of sentence

* __sasjnum__ chooses num gen to the left of sâš


* __NotOrdIfABBR__



!!Imperatives

See also ''Imprt or Ind'' some sections down.

* __NotImprtAfterLede__ removes Imprt if leđe one to the left

* __ImprtInit__ selects sentence-initial imperative when followed by Ill


* __ImprtDál__ 


* __ImprtComma__ 

* __ImprtNotVGen__

* __NotImprtInd__ 

* __NotImprtConNeg__ 

* __NotImprtA__ 

* __NotImprtN__ 


* __NotImprtVFIN__ 


!!Lexicalised derivations





* __derN__ removes DER-N if lexicalised non-essives



* __derA__ removes DER-A if lexicalised A

* __derAdv__ removes DER-Adv if lexicalised Adv

* __derPass__ removes DER-PASS if lexicalised V

* __derV__ removes DER-V if lexicalised V,





!Particular verbs





* __PrsPrcIfA__







!!Propernouns

! Removing or selecting proper nouns that are lookalikes



*Removes __PropPl__, but problems with names as Davviriikkaid Ráđi, there we want Prop Pl


* __PronNotProp__



* __PropAttrIfPropx__ removes Attr if no Prop on the right side

* __PropInsideProp__ Selects Prop if capital letter inside clause


* __PropAttr__ Removes (Prop Attr), but not if to the right is Prop or Ord OR ABBR 

* __PropSur__ Selects (Prop Sem/Sur) if finite verb to the left. Immediately to the right is Sem/Fem OR Sem/Mal


* __r__




* __PropAttr1__ Selects Attr if you are Sem/Fem OR Sem/Mal, Sem/Sur or INITIAL and to your right is Prop which is Sem/Fem OR Sem/Mal or Sem/Sur 









!MISC




der

*Removes __derNEss__ if lexicalised, and both nouns are essive.








!!Verbs

* __vazzid__ chooses väzziđ when Ill or čoođâ to the right --  vazzâđ venytellä vs. väzziđ kävellä


!!Adjectives or nouns



!!Adjectives, nouns, not adverbs

* __Aifeambbo__ selects A after eambbo



!!Subjunctions

Conjunctions



!!Adverbs

!Adverbs or postpositions

!Specific adverbs

! buoh
* IFF __buotAdv__ : buot Adv in front of Superl ok smn


* __mannelTimeAdv__ golbma jagi maŋŋel

* __AdvSTV__ váldit mielde, oahppat bajil. eará? STRICT-TRANS-V is too strong


* __pyereest__


* __miätáV__  




* __oddasitAdv__





* __oktanAdv__

* __ovttasAdv__



* __oktiiAdv__ select






* __ollasitAdv__ selects


Adverbs and not Pronouns

* __siste__ is adv



!!Pronouns 


* __recipr, reciprPl__ select Recipr





!Nouns, not verbs





















puáttiđ, not pađđeeđ (Prt: Sg3 poođij, Du1 poođijm, Du2 poođijd, Du3 poođijn, Pl1 poođijm, Pl2 poođijd)
* puáttiđ = tulla, pađđeeđ =käyttäytyä_levottomasti_(vasovasta_vaatimesta)
* We will make rules for pađđeeđ when we see examples of its use.



!Lexical selection - nouns






* Some brave rules for removing Imprt








!Verb or Noun?










* __datPers__ selects Pers. I made it stronger than it was. ref. r897 in sme-dis.rle



!!Px constraints 

!PX Number




!From sme	


First select Px, then remove all remaining Px

* Set with adjectives, which are documented to have Px in our corpus

* __PxAlone__ Remove Px if it is only word in the sentence, and not a typical px-term





* __NPxPrfPrc__ Remove Px if PrfPrc with  leat to the left


* Nouns: __NomPxSg1__ (not Ess) as the only word in a sentence. Needs no disambiguation.


* Nouns:  __AccPxSg1__ after a TV verb. Exception for Aux.

* Nouns:  __AccPxSg1__ after a TV Inf verb.


* __PxSg1LocAcc__ is Acc to the right.

* __PxSg1Acc__ is Acc to the right.


* coordination __PxSg1coord__ 

* __PxSg1coordLast__ for the last word of a coordination


* __PxSg2AccImprt__ if  TV Imprt to the left

* __PxSg2AccPrfPrc__ after PrfPrc 

* __NotPxSg2__ if no Sg2 


* Nouns: __PxSg3AccPrfPrc__ if PrfPrc and Sg3 to the left







*  __PxSg3GenPo2__ in front of Po, to the left of the owner



* __PxGenNorPo__  




* __PXAccCoor__  



* __PxSgIllPx__  








We end section 2 by removing all remaining Px

* __KillPx__ removes all remaining Px readings



* __NotVGenIfDer__ removes VGen if 0 = Der/Pass or Der...(r947)


* __NotImprtIfAttrLeft__ removes Imprt after attribute

* __NotImprtIfRel__ removes Imprt after Rel, unify this with other left context (r948)




* __VSg1IfLeftMun__ selects Sg1 when "mun" is to the left (r949)




* __VSG1IfRightMun__ selects Sg1 when "mun" is to the right (r950)


!Sg2 - early cycle, safe rules


* __VSG2IfLeftDon__ selects Sg2 when "tun" is to the left (r951)



* __VSG2IfRightDon__ selects Sg2 when "tun" is to the right (r952)


!Sg3 - early cycle, safe rules

* __VSG3IfLeftSon__ selects Sg3 when "sun" is to the left (r954)

* __VSG3IfRithgSon__ selects Sg3 when "sun" is to the right (r954)

* __VNotSg3When12Left__ removes Sg3 if 12 Pron immediate left (r955)


* __NegSg3BeforeFoc__ selects Neg before Foc/ge or ConNeg (r959)

* __vfin__ removes verb reading when the reading should be noun  







* __VDu1IfMoaiLeft__ selects Du1 when "moai" left (r960)

* __VDu1IfMoaiRight__ selects Du1 when "moai" right (r961)



!Pl3 - early cycle, safe rules

Select...

* __r976__ SE V Pl1 if *-1 SII




* __r982__ removes Prt Sg2 if Pl3 subject - 6002


* __VPl3Lookalikes__ removes "verbs" like "mane" and "peri" (r984) - 274

* __VSg3Lookalikes__ removes "verbs" like "skuvlii" 


OBS: denne er ikke helt bra













* __NPlbeforeRel, NSgbeforeRel__ select N in front of Rel and MO

!!Adjectives and adverbs

!Adv or not?
maid has many readings and as Rel it is a member of S-BOUNDARY. Therefore we need to disambiguate is early in this file. Most important is to select Adv. Because of that A ang N still can have Vfin readings, it is difficult to make very general rules.

* __vaikkomii__





* __Interj__ or not



* __comparAdv__







* __AttrABBRNum__







* __PoParantes__ selects Po after paranteces



* __PrGen1__ selects Pr

* __PrGen2__ selects Pr


* __PrNoCompl__ removes Pr if no complement to the right	


* __PoGen__ selects Po




* __vuollaiPo__ selects



* __gaskkasPo__ selects



* __NwhenPo__ removes N if Po





* __compNomHead__ NP-HEAD-NOM (ADVL) go NP-HEAD-NOM (ADVL). VFIN-NOT-IMPRT pga manglende disamgiguering


* __compMisc__ go geassebuođut, go dán áigge


* __compCoord__ coordination	

* __compCoordAttr__ coordination again, now with Attr. Speacial rule because of that Attr also has other readings.	

* __compInf__ 

* __compInfCoor__ 



* __killAllnotComp__ Removes analysis which are not @COMP-CS<

** ''This was the kill all not Comp rule!!''




!!!MAPPING OF CC AND CS

Mostly we map both @CNP and @CVP, then we select @CNP, after that we remove them so @CVP remains

* __cnpCompSC__ Map @CNP if @COMP-CS< or COMPAR ahte

* __cnpCompSpec__ special rule because of PrfPrc = VFIN

* __CSasCNPCVP__ Map some CSs both @CNP @CVP

* __CSasCVP__ Map @CVP to CS

* __CCasCNPCVP__ Map (@CNP @CVP) to CC

* __ahteCNP__ ahte CC @CNP, remove the rest

* __killAllahtenotCS__ All other occurrences of "et" are CSs.

* __vaiCCCNP__ vai as CC or CS

* __vaiCC__ remove vai as CC 

* __vaiCCNegQst1__ vai CC @CVP before Neg or question

* __vaiCCNegQst2__ vai CC @CNP in question about two alternatives



* __killAllvainotCSCVP__ Select all vai CS @CVP	


* __CVPNPron__ No finite verb or verbalactivity in front N/Pron @CNP N/Pron	


* __CVPnoVfin__ No potential finite verb following

* __CVPnoVfin__ Infitive following


* __CVPInfInf__ between to Inf

* __CVPadvladvl__ between to ADVL


* __CVPAdvAdv__ between to Adv


* __CVPActioNom__ 







* __CVPnoVfinAdvl__ No finite verb in front ADVLCASE @CNP ADVLCASE	




* __CVPMiella__



* __CVPAdvNom__ Nom @CNP Adv Nom	





* __CVPAccAdv__ Acc @CNP Adv Acc	

* __CVP__

* __CS__


* __killAllCNP__ removes all remaining @CNP

* __XCC-CS__ removes CC and CS with no synttag




* __Interr__ selects interrogative pronouns in questions

* __InterrIfPot__ selects interrogative pronouns in potential sentences, and after that we remove the remaining Interr


* __munPl3__ removes Pron Pers Pl3 if there is no verb agreement

* __Rel__ selects Rel

* __RelSg1, RelSg2__ select Rel

* __RelPl__ selects Rel

* __RelPl__ removes Rel




!!Numerals

* __NumAccCurrency__ Selects (Num Acc)	

* __NumNom__ Selects (Num Nom) 

* __NumNomCoord__ Selects (Num Nom) 

* __r1082__ Selects (Num Nom) 

* __year__ Selects (Num Gen)

* __numunit__ Selects (Num Gen) + NUMUNIT 

* __NumGenPo__ Selects Gen if you are Num and there is a Gen following the first Gen to the right ''gávcci máná njuni ovddas'' 

* __jagiGen__

* __Locattr__

* __Illattr__

* __LocIllattr__

* __numPlAccn__



* __WWNumOrdIllAttr__ selects Ill Attr and Loc Attr for numerals and ordinals


* __WWNumOrdAttr__

* __galleIndef__

* __galleIndef__

* __galleNum__


* __nubbiGen__

* __nubbiIndef__


* __nubbiOrd__

* __nubbiOrdManu__


* __nubbiOrdSuperl__

* __nnubbiIndefIll__

* __nnubbiOrdLex__

* __nnubbiIndefOkta__

* __nnubbiOrdEss__

* __nnubbiIndefAcc__



* __nnubbiAttr__

* __nKillnubbiOrd__



!!Indefinite pronouns
The rules are not documented yet

* __mihheen__ attr if neg + mihheen + NP


* __IndefAttr2__ Selects (Indef Attr) 

* __IndefAttr3__ Selects (Indef Attr)



* __NoAttr__ Removes Attr if you are Pron and first one to your right is (Pron Rel)	

* __NoIndefAttr__ Removes (Indef Attr) if first one to the right is (Pron Pers Loc)

* __NoIndefGen__ Removes (Pron Gen Indef) or (Pron Acc Indef) if intransitive mainverb to the left and end of sentence to the right ''muhto gávdnojit maid eará''




* __IndefNotAdv__


* __IndefNotAdvL__


* __MiiPl__




* __DemSgNom__ selects Dem Nom Sg if VFIN Sg3




* __sierraAAttr__



* __Comp__ rules select Comp A



!Attribute disambiguation

* __AttrTitle__

* __AttrVFIN__ removes Attr in front of VFIN



* __AttrnotNA__ removes Attr when no N or A to the right



!Rules for Attr between Dem and N

* __AAttrDemSg1, AAttrDemPl1__ 

* __AAttrDemSg2, AAttrDemPl2__ 

* __AAttrDemSg3, AAttrDemPl3__ 

* __AAttrDemSgIll, AAttrDemPlIll__ 

* __AAttrDemSgLoc, AAttrDemPlLoc__ 



* __AAttrDemdakkar__ 



* __AAttrN__ no copulas close to the left

* __AAttrCop__  copulas close to the left



* __AdvManimus__ 



* __AttrAdv__ 

* __Cmp/SplitRA__

* __CopANom__ 


* __ANom__  removes A Nom

* __AAttr__  selects A Attr

* __OrdAttr__


* __AdvN__ removes Adv   

* __AAttrPunct__    



* __AttrTIME__    

* __AAttrCoord1__ coordination, first part

* __AAttrCoord2__ coordination, first part

* __PrfPrcCoordA__ selects PrfPrc in coordination with an A








* Remove Nom, Acc and Gen if Comp




* __APlNomafterCop__ selects A Pl Nom after copulas and Pl Nom OR Pl Pron

* __APlNomafterCop2__ selects A Pl Nom after copulas and Pl Nom OR Pl Pron

* __APlNomafterDu__ selects A Pl Nom after copulas and Du

* __ASgNomNoSubj__ selects A Sg Nom after copulas Sg3 or Neg Sg3

* __ASgNomafterCop__ selects A Sg Nom after copulas and Sg Nom, not so strong constraint for the target


* __ASgNomEssCopNeg__ selects A Sg Nom after copulas Sg3 or Neg Sg3s, 


* dsfa

* __AcompGo__ Selects (A Comp Nom) even if there is no verb (ellipse)

* __Wr1775xc__ Selects (A Sg Nom) if you are (N Sg Loc), Der/NomAg or (NN A). Copulas is to the left. EOS or CLB is to the right

* __Wr1776xc__ selects (A Sg Nom) 

* __Wr1777c__


* __Wr1778xc__

* __Wr1779xc__

* __Wr1780c__

* __Wr1781c__

* __Wr1782__


* __Wr1784__

* __Wr1785__

* __Wr1786xc__

* __Wr1787c__

* __Wr1788xc__

* __Wr1789xc__

* __Wr1791xc__

* __Wr1796xc__










!!And now some rules for adverbs that modify adjectives

* __AdvModA2__

* __AdvModA3__

* __AdvModA4__

* __NomAg__

* __Nom__

* __Nom__

* __vfin__




!!ConNeg forms

Number following the rule headers below refer to numbers of hit in a 13 053 859 word corpus.

* __ConNegImp__ selects ConNeg Imprt if Neg Imprt to the left. - 4265

* __PrfPrcConNeg__  to ConNeg Aux after PrfPrc

* __ConNegIfNeg__ selects Ind ConNeg if Neg Ind to the left. This is the main (and common) ConNeg rule. - 660327


* __ConNegPrfPrc__ selects ConNeg for leat when topicalised PrfPrc between Neg and leat - 713


* __NotConNegIfNotNeg__ removes ConNeg if no Neg to the left. Consider unifying with NotConNegNotNeg. - 1094269



* __NotConNegNotNeg__ removes remaining ConNegs whenever no Neg to the left. - 5862







* __VGen__ selects VGen after VGEN-V-TRIGGER-verb



* __VGen4__




* __KillAllVGen__ removes all VGen (r1842)


!!Supinum vs. potential -- no example found in large corpus

!!Perfect Participle

* __r1844__ removes PrfPrc if 0 is the second N in an N and ... N construction

* __r1844__ removes PrfPrc if 0 is the second N in an N and Gen ... N construction (this is marginal)



* __r1852__ selects PrfPrc if copula to the left

* __r1853__ selects PrfPrc if Rel to the left which again is linked to copula


!Topicalized version

the following chapter should be possible to unify.

* __r1855__ selects PrfPrc if Nom to the left linked to copula

* __r1857__ selects PrfPrc if Acc to the left linked to copula

* __r1858__ selects PrfPrc if NP head to the left linked to copula

* __r1857__ selects PrfPrc if copula to the left

* __r1861__ selects PrfPrc if VFIN to the left



* __r3576__ selects PrfPrc if Acc to the left linked to activity verb


!!Actio


!!Present participle
*orrut vs. orrot) 
!!Rules for "addit" (which is an adjective, but more often a verb)
!!Actio Loc = N Loc


* __ActioLoc__ is an IFF rule, we also need rule for 'leat', like in lea go bieru oastimis



!!Nouns or verbs

The rules are no documented yet

* __VFINAttr__


* __ActEssIfSensationv__	

* __NoActorIfSg3__

* __GenIfPo__

!!Demonstrative pronouns, agreement in DP - should it be moved to after verbmappings? 
The rules are no documented yet

* __DemAttr__



* __IndefAgree__ guhtege goappašat iešguhtege guhte



* __DemCASEPl__

* __DemCASESg__

* __DemAttrNum__

* __DemAcc__

* __DemAttr__



!!!VERB MAPPINGS

Lexical disambiguation of verbs



!!Verbs as predicatives (@SPRED>) and (@<OPRED) 

!The tags (@SPRED>) and (@<OPRED) target  PrfPrc
The rules are no documented yet


!!Verbs as prenominal participles (@>N):

* Some verbs will not be @>N

* __NPrfPrc1__ with 1C N Nom


* __NPrfPrc2__ with -1C Dem or Num or Attr or Indef

* __NPrfPrc3__ with PrfPrc or ConNeg to the left, the N can be different cases



* __NPrfPrc4__ mannat in front of TIME

* __NPrfPrcPr__ after Pr 

* __NPrfPrcPo__ before Po

* __NPrfPrcGen__ after Gen


* __NPrfPrc6__ the verb can be to the right



* __NPrfPrcCoor__ coordination

!(@+FAUXV) and (@+FMAINV) target Neg, orrut
* __+FAUXVNeg__

* __+FMAINVorrut__ finite orrut

* __FAUXVorrut__ finite orrut

* __FAUXVorrut__ infinite orrut

!(@<SUBJ)  target Inf




* __<SUBJInf2__

* __r354__

* __<SUBJInf3__

* __<SUBJInf4__


* __<SUBJInf6__

* __SUBJ>Inf__

!(@<SPRED)  target Inf








!(@<ADVL)  target Inf, Actio Ess













!@-F<OBJ  target Inf 





!(@A<)  target Inf 	
* __AInf__ Inf 	

!(@N<)  target Inf, Actio Ess






* __N<Infcoor__


!(@<ADVL)  target Inf, Actio Ess




* __ADVLActioEss__ Inf 		


!(@<OBJ)  target Inf, Actio Ess, PrfPrc 















* __OBJActioEss__ Inf 		

* __OBJPrfPrc__ PrfPrc 			




!(@+FMAINV) and (@+FAUXV) and (@-FAUXV)




* __+FMAINVcop__ COPULAS verbs     

* __+FAUXVaux__ AUX  verbs     

* __+FAUXVboahtit__ boahtit as AUX      

* __-FAUXVaux__ AUX verbs     

* __+FMAINVcopInfconstr__ leat before Inf     



* __+FAUXVCop__  copulas coming before the mainverb

* __+FAUXVCop__  copulas coming before the mainverb, relative clause inbetween


* __+FMAINVHabconstr__  in habitive constructions    

* __+FMAINVCoopCoord__ coordination  

* __+FAUXVleat__  

* __+FMAINVAux1__  

* __-FMAINVAux2__  

* __+FAUXVCop__  copulas coming after the mainverb


* __+FMAINVCop__  copulas 	



!The big general @+FMAINV rule

* __+FMAINV__  to the remaining finite verbs which are not AUX    




* __+FMAINV__  to finite verb after mainverb















!(@-FMAINV) and (@-FAUXV)

* __-FAUXVConNegCop__  to ConNeg COPULAS   

* __-FAUXVConNegAux__  to ConNeg AUX-OR-MAIN   

* __-FAUXVConNegAux__  to ConNeg AUX   

* __-FMAINVConNeg__  to ConNeg   







* __-FMAINVConNeg__  to ConNeg

* __-FMAINVConNeg__  to ConNeg Aux after PrfPrc






* __-FAUXVPrfPrcAux__  to PrfPrc AUX  before Inf or Actio Ess

* __-FMAINVPrfPrc__  to PrfPrc 

* __-FMAINVPrfPrcEss__  to PrfPrc before Ess

* __-FMAINVPrfPrcleat__  to PrfPrc leat

* __-FMAINVPrfPrcafterAuxAux__  to PrfPrc after two Auxs

* __-FMAINVPrfPrccoord__  to PrfPrc coordination	

* __-FMAINVPrfPrccoord__  to PrfPrc coordination	

* __-FMAINVPrfbeforeAux__  to PrfPrc before the Aux	

* __-FMAINVPrfafterMan__  to PrfPrc before the Aux	


* __-FMAINVInf__  to Inf


* __-FMAUXVActioEss__  to Actio Ess

* __-FMAINVActioEss__  to Actio Ess

* __+FAUXV__ to  Aux

* __NPrsPrc1__ with 1C N Nom



* __ActioNom__ with 1C N Nom

* __<ADVLVAbess__ VAbess ADVL

* __<ADVLVGen__ VGen ADVL

* __ADVL>VGen__ VGen ADVL

* __<ADVLGer__ Gerundium ADVL

* __ADVLGer>__

* __-FMAINVLoc__ Actio Loc










!!!NOUNS

!!!CASE DISAMBIGUATION

!!Num as subject, tricky cases - the rule should be here because of the verbdisambiguation








!!ACCUSATIVE-ILLATIVE DISAMBIGUATION






!!ACCUSATIVE-GENITIVE DISAMBIGUATION


!!Secure rules for choosing Acc



* __PGenN__ selects Gen when (Pron Pers) to the left and N to the right ''mu sámevuođa iđuid''

* __CoGen1__ (quite strict) selects the first of coordinated genitives ''riikkaid, čearuid ja boazoorohagaid ovttasbarggu''


! Semantihkka: Choosing accusative or genitive semantically



* __vuoiAcc__ selects accusative if ''vuoi'' or ''vuoi surgat'' to the left 







* __SEMnotPossessor__ Removes Gen if you are not a possible possessor (a human) # HAB-ACTOR


* __SEMnotHUM__ removes Gen. This is when an NP is thought to be the OBJ, because it's not in the human sets and to the right is NON-FAMILY ''njálgáid mánáide''. 

* __SEMXr2066__ Removes Gen if there is a human or org to the right, exeption for ''čállingiela áhčči'' and so on





* __SEMXxr2071__ Removes Gen: Nobody can possess a Proper name? Except from (Pron Pers) and Sem/Fem OR Sem/Mal

* __SEMXxPropOrg__ Removes Gen: Who can possess Prop Sem/Org?    

* __SEMdep__ Select Gen if main-organization in front of department   
* __SEMorghum__ select gen if organization or education in front of human   


* __SEMXr2073__ Remove Gen: Accusative in front of a human group ''loktema sámiid buorrin''

* __SEMr2074__ Selects Gen in front of HUMAN-GROUP

 * __SEMactor__ Select Gen in front of ABSTRACT and RIEKTEDILLI ''unnitlogu oaidninčiegas''

* __SEMXr2076__ Selects Gen if you are HUMAN or Pron with an ABSTRACT to your right ''iežaset vuoigatvuođa''

* __VocNom__ 



* __SEMyouareNom__ Removes Gen and Acc when 0 FAMILY or PROFESSION because you are Nom. Not if -1 Num and VFIN is LEDE or IV ''Oahpai go Sire sámegiela''

* __SEMyouareGen__ Removes Nom if movement verb to the left and illative to the right, because you are the modifier of Ill ''mannat Madame Tussaud kabinehttii''

* __SEMnotNom__ Removes Nom if a Nom to the right followed by a transitive verb. 0 is animate and to the right is Ill. You are the modifier of Ill




* __GenModifiesN__ is a tentative rule to be modified


* __SEMXxr2081__ Removes Gen if NATION or POLITICAL-PLACE are to your right ''dilálašvuođaid sámi''

* __SEMXr2087__ Selects Gen if you have "eennâm" or "guovu" immediately to your right ''Gomorra eatnamii''

* __SEMplcGen2__ Removes Gen in front of a GENERAL-PLACE or POLITICAL-PLACE, if you are a noun ''bidjen hildu sadjásis'' 

* __SEMplcGen3__ Removes Gen in front of GENERAL-PLACE or POLITICAL-PLACE, if you are ABSTR-TEXT or TEXT ''cealkámušaid guovlluid dearvvašvuođafitnodagaid jahkedieđáhusain''

* __SEMXr2079__ Removes Gen if you are Acc in front of MANNU ''guđii virggi skábmanánu 1. b.''




* __SEMxhab__ Selects Acc if COPULAS to the left of HAB-ACTOR ''lea min''

* __EMeallimamuorra__ Selects Gen eallima muorra


* __ACRGen__ Selects genitive: NRK Sápmi

* __ACRAttr__ Selects genitive: IL Nordlys



* __SEMXr2096__ Removes genitive: because Accusative in front of an organization

* __SEMGenORG__ selects Gen (modifier): in front of an organization ''Stáhta Oahpahuskantuvra''



* __SEMgen1__ removes Acc if buot, gait or buohkat in front of a genitive, followed by a plural noun ''buot Norlándda ohppiid''


* __SEMgen2__ removes Acc if bargat or dihte are FMAINV or Inf and are found somewhere to the left of a Gen, which is followed by a noun ''bargame boazodoallolága ođastemiin''

* __SEMXr2103__ Selects accusative: OASSI is usually accusative ''hálddaša stuora oasi''


* __SEMXxr2104__ Selects accusative: if WRITING-ACTIVITY-V to the left and you are a TEXT ''čállá vaidaga''

* __SEMXxacc__Removes accusative: if WRITING-ACTIVITY-V to the left and a noun to the right ''čállit Norgga vásáhusaid''




* __SEMXxr2108__ Selects genitive if you are SAPMI with an Acc/Gen immediately to your left and a noun immediately to your right ''girji sámi áššiid (birra)''

* __SEMsapmiModifier__ Selects genitive (modifier): Sámi, suoma or ruoŧa  as modifier of noun ''sámi oahpahus''





* __SEMtext__ (modifier) selects genitive (modifier) if you are a TEXT in front of KLASS ''doalloplána čuoggái''



* __SEMgiella2__ Gen if you are Pron followed by giella ''iežas giella''




!Other genitive rules

* __topGEN__ Selects Gen if sentence intitial. To the right a Prf Prc that modifies nominative ''Stáhta nammadan láhtu''

* __NomQst__ Selects Nom in a Qst-sentence. To the left is Nom and leat with a Qst-particle ''Leat go álbmotmeahcit veahkaváldi''


*__lassinIll__ Selects Ill if first one to the left is lassin ''lassin Sarai''



!Gen and preposition/postposition



* __GenAPP__ Selects genitive when a preposition to the left, or when a postposition to the right ''rastá riikarájiid''


* __NomIfPo__ removes Nom if sentence initial, because it modifies Gen


* __GenPoCoordPunct__ Selects genitive for coordinated postpositions: with PUNKT to the left 

* __GenPoCoord__ Selects genitive for coordinated postpositions ''ráŋggáštusa ja buhtadusa hárrái''


* __GenGenPo__ (modifies pp-phrase) selects Gen in front of postposition-phrase ''álgojagiid soađi maŋŋá''

* __GenORG__ (modifies Loc) selects Gen if you are MAIN-ORGANIZATION and to your right is Loc ''dearvvašvuođafitnodagaid jahkedieđáhusain''

* __SEMnom__ (modifies Nom) removes Acc if sentence boundary or adv to the left. To the right is Nom followed by a transitive verb and Acc ''stálu beana njoallu háviid''



!Genitive in place adverbials ROUTE

* __GenPlc__ Selects genitive if you are ROUTE, and there is a MOVEMENT-V to your left or right ''boahtiba dán geainnu''


!Temporal adverbials: Choosing accusative or genitive TIME

* __GenMannuOrdRight__ selects Gen if you are mannu and to your right is A Ord ''miessemánu 10.''

* __GenMannuOrdLeft__ selects Gen if you are mannu, to your left is Ord and to your right is a numeral



* __TIMEobs__ selects Gen if you are time, and to your right is an intransitive real-verb. No adverbials allowed to the right ''vuolggán bearjadaga''





* __GenJuohke__ selects Gen if juohke or seamma to the left ''juohke dálvvi''

* __GenJahkiNum__ selects Gen if you are jahki num with a numeral to your right ''Skuvlajagi 1998-99''

* __AigiModifier__ (modifier) selects Gen if aigi to the right ''konferánssa áiggi''

* __GenHávvi2__ selects Gen for hávvi if a transitive verb cannot be found somewhere in the sentence

* __GenGeardi__ selects Gen if the beginning of the sentence to the left ''Eará háviid''

* __GenRbeaivi__ (modifier) selects Gen if riegádanbeaivi to your right 

* __GenDURadj1__ selects Gen if a duration adverbial to the left 

* __GenDURadj2__ removes Gen for TIME-N, if duration adjective to the left ''olles dálvvi''

* __NoTimeAccII__ removes Acc for time if POINT-IN-TIME verb to the left 

* __timeADVL__ selects Gen for time: when perfectum participle or infinitive to the left are time adverbial verbs or not time object verbs, to the left of this there shall be an auxiliary ''lean čoavdán cealkagiid maŋimuš áiggi''












!Accusative or Genitive

* __theAccusative__ selects Acc if you are a N or Pron with CC to your right, followed by Acc and a CLB or VFIN ''gápmagiid ja vuoddagiid, sii geavahedje''







* __NotGenitive__ selects Acc if you are a N or Pron with punctuation marks to your right, followed by a noun-phrase boundary






! Reflexive pronouns: acc or gen







* __GenIES__ (modifier) selects (Pron Refl Gen) if NON-FAMILY OR ("piäládâh") OR SAMEDIGGI-GEN to the right ''iežaset mánáide''


* __AccIES__ SELECTS accusative object (Pron Refl Acc)  

* __AccIES__ (modifier) removes accusative object (Pron Refl Acc) if Ill or Loc to the right, but not if a transitive verb is found to the left 


* __GenIESinf__ removes (Pron Refl Gen) if a transitive verb to the left and an Inf to the right 




!Accusative object 


* __AccActioEss__ Selects accusative: when a Strict transitive verb actio ess to the left, but not if there is an other Acc to the right followed by EOS

* __AccEss__ removes Acc when you are SAPMI-N-HEAD with an Ess to your right, but not if there is a transitive mainverb to the left ''dutkama duogážin''


*__topOBJPers__ Removes Gen if you are Acc, and to you right is a Pron followed by a transitive verb. You have to be sentence initial

*__AccVAbess__ Selects Gen if to the right is abessive 

* __topOBJ1__ Selects accusative: when a Strict transitive verb to the right (topicalized object) ''beaskka geavahedje''


* __topOBJ2__ Selects Acc when a transitive finite mainverb to the right (less strict) ''dan juohkehaš fuobmá''


* __topOBJ3__ Selects Acc. It is not depending on a transitive verb like topOBJ1 and 2, but selects Acc when Aux to the left, but only if there is no chanse of it beeing a Nom 

* __AccTV1__ Selects accusative: when a Strict transitive verb to the left (barrier exludes everything but: adv, N Ess , N Loc and Pcle). No Acc allowed to the left of the verb. No Acc allowed to the right of you, except pronouns and education (sentenceboundary and N Ess as barriers). Only numunit numerals are allowed to the left. You are not Acc if you are: time, ruote or Pron Indef. Neither if you are Pron Refl with Gen to your right followed by N Ess. Neither if you are Pron Refl with Gen to your right followed by Po. N Nom and Ger not allowed immediatly to your right. You are not Acc if you are a Nom cased Prop and the verb is some kind of verbalactivityverb and ahte or sentenceboundary is to the right. Vdic not allowed immediately to your left. If váldit is the verb, you are likely to be a Gen if Ill-body noun is found to the right. ''oste mielkki gávppis''




* __PronNP__ (removes Acc): selects Gen for Pron Pers if Acc or Ill to the right, given that there is a secure object or that no transitive verb is found ''bija ruđa mu kontoi''


* __r2206__ selects Gen when a finite verb to the left and Nom or Acc to the right ''lohkaba su girjji''


* __r2271__ Removes genitive when a transitive verb to the left and you (not if you are a pronoun) are followed by Ill/Loc/Com/Adv: ''doalvvui stálu meahccái''

* __AccTV2__ Selects accusative: when a transitive verb to the left. No Acc allowed to the left in the sentence (sentenceboundary as a barrier). No Acc allowed to the right (barriers are CC, comma and sentenceboundary). Note that Gen to the right followed by a noun is allowed. You shall not be: route, time, Pron Dem. You are not Acc if you are: Gen-cased Pron or Animate with Ill immediately to your right. No Acc, Com, N Nom or Gerundium allowed immediately to your right. No Gen followed by Po allowed immediately to your right. A SG3-verb is only allowed to your left (barriers excluding everything except NP-heads and adverbs, PrfPrc is also a barrier) if there is a Nom left to the SG3-verb. No vdic allowed immediately to your left. You are not Acc if: you are a Nom-cased Prop, followed by ahte or EOS and the verb found to the left (SV-boundary) is some kind of verbalactivityverb or a humanagentverb.

* __AccTV3__ Selects accusative: when transitive verb to the left, if it doesn't find a barrier: comma, Num, real-v, Ess, s-boundary. Acc not allowed to the left of the verb. Not Acc if animate or Gen in front of Ill. Numerals the only Acc allowed to the right. Not Num, time route or adv. Not Com or Ger immediately to the right. Neither Po. Not Acc if sg3-verb to the left without a Nom to its left. Not Pron Dem followed by N, neither Pron Rel followed by time. No vdic immediately to your left. No Nom-cased Prop with some sort of verbal activity to its left is allowed..  


* __OLDr2466__ Selects accusative: when transitive verb to the left, but not if the TV is FAUX OR LOC-V




* __AccInf__ Selects Acc if the verb to the left is TV + Inf (you are the obj of the Inf). Differs from the other rules by not beeing restricted by an Acc to the right ''hállat eatnigiela''

* __AccCOP__ Selects Acc if copulas to the left and nominative to the left of COP ''gápmagat leat áhči''


!Gen modifiers inside NP 

* __GenNP1__ Selects Gen for Pron Pers (modifier): if NP-BOUNDARY OR Acc (but not if the finite verb is TV) to the left and N to right 

* __GenNP2__ Selects Gen for N (modifier): if CC "já" immediately to your left and accusative to your right ''ja sámi jurddašanvuogi''

* __GenNP3__ Selects Gen (modifier): if first one to right is Nom or Loc ''Norgga oaivegávpogis''

* __GenNP4__ (modifier) selects Gen -1 BOS or COMMA, 1 Nom ''nissoniid bargu''

* __GenNPCo__ (modifier) Selects Pron Pers Gen if Nom to the left of ja ''Mun ja mu ustibat''

* __GenRefl__ (modifier) selects Gen in front of a noun in accusative or nominative case ''iežaset oiviliid''



* __AccAfterCC__ Select accusative: if genitiv to the left, and CC "já" to the left of genitive ''eamiálbmot- ja globaliserenprošeavtta koordináhtor''




!Accusative in coordination



* __CoAcc1__ Selects Acc when NP inbetween commas ''guolleoivviid, dáraid, debbuid, buđeittaid, boares rásiid''


* __CoAcc2__ Select Acc if coordinator to your left and accusative to the left of the coordinator ''deaja dahje sávtta''


* __CoAcc3__ Selects Acc in front of ''ja'' if there is a secure Acc to the right ''semináraid ja diehtojuohkinčoahkimiid''


* __CoAccJA__ Selects Acc when "já" to the left and comma to the left of "já" with a secure Acc to the left of comma ''sámegiela, ja heajos dárogiela.''

* __CoAccJA2__ Selects Acc in front of Gen + Po if ja in front of Acc ''ja ruhtan sávzzaid ovddas''




!Intransitive verbs can sometimes be transitive

* __IVasTV__ Selects Acc if you are GEOGRAPHICAL-PLACE, ABSTR-ROUTE or EDUCATION and somewhere in the sentence is a intransitive verb acting as a transitive verb ''sii vázzet skuvlla''





* __IVsahttit__ Selects Acc 



* __NewGen__ (complement of numerals) Selects Gen Sg when Num Sg to the left ''guhtta kilu''



* __NewGenCo__ (coordinated complement of numerals) Selects Gen if Num Acc + NewGen found to the left of "já" ''máŋga dáhpáhusa ja digaštallama''

* __ALU4__ Selects Acc if you are Num and to your right Num Acc followed by MEASURE OR ALU/A ''guokte golbma mehtara alu'' 



* __NumTimeMannel__ Selects Acc for Num before TIME MANNEL



* __GenBoaris__ Selects Gen in golbma ''jagi'' boaris

** Ritva comment: Find a rule for "viđa" aswell, this hits "mehter" as it should


* __XXr2002__ Selects genitive if there is a numeral immediately to your left, and you are TIME: ''golbma jagi''



!Numerals 


* __NumMoney__ Selects Gen if you are a numeral and immediately to your right is CURRENCY ''vihtta ruvnnu''





* __NumAcc1__ Selects Acc if you have a transitive verb to the left and you are a numeral followed by a noun  ''oste guokte mielkki''

* __NumJahki__ Removes Acc if you are a numeral and JAHKI-NUM is immediately to your left ''mávssii mannan jagi 43 ruvnnu''

* __NomIfNum__ Removes Acc if Gen to the right (because you are Nom). Transitive verb with an Acc to the right ''máŋga gávpeolbmá lonuhedje fáhcaid''

* __NumAcc2__ Selects Acc for singular numerals if there is a transitive verb somewhere in the sentence and the numeral is followed by a noun ''logi báhkkoma'' OBS



* __GenIfNum__ (complement of numerals) Selects Gen Sg if there is a Num Sg to your left ''guđa geardde'' 

* __NumAccCo__ (coordinated num) Selects Acc if you are Num Sg and to your right: CC with a Num to the right ''guokte ja eanemusat golbma''

* __NumAccIV__ Selects Acc 




* __NumAccPlRight__ Selects Acc when transitive verb to the left. You are Num Pl and to your right is Acc ''goarui viđaid gápmagiid''

* __NumAccPlLeft__ Selects Acc when tranistive verb to the right (same as the previous. Only differs in which direction the verb is found). ''galliid sabehiid don ostet''	

* __NumAccPlLeft__ Selects Acc if you are N Acc Pl and to your left is Num Acc Pl ''galliid sabegiid''		



* __NumOkta__ Selects Acc if 0 okta followed by a noun. Transitive verb to the left ''oidnen ovtta nieidda''





* __QUANgenCoord__ Selects Gen for coordinated complement of a numeral

* __QUANgen1__ Selects Gen if a numeral with Nom-case to the left and 3Pl-verb to the right

* __QUANr2142__ Selects Gen if a numeral to the left and genitive to the right. Transitive verb not allowed to the left.




!Leftover accusatives


*__COMPInfAcc__ Selects Acc if you are Gen and to the left is an Inf TV @COMP-CS<




* __AccInf2__ Selects Acc if Inf immediately to the RIGHT ''guliid čoallut''

* __AccNomCOPconstr__ Selects Acc in front of Inf; only if there is no chance for itself beeing Nom


* __AccTV4__ Selects Acc if transitive mainverb to the left. Lots of restrictions to the right



* __AccPronRel__ Selects (Pron Rel Acc) when a secure Acc or Nom to the left ''gáibidedje internáhttaskuvlla man''

* __AccPronRel2__ Selects (Pron Rel Acc) when somewhere in the sentence is a Nom (barrier is sv-boundary), but only if leat isn't the main verb. ''geaid eamiálbmogat'' 

* __AccPronRel3__ Selects Acc if there is a (Pron Rel Nom) to the right. Obs: not hit nominatives, hence negations. ''eanu mii šealgá''	

* __AccActioLoc__ Selects Acc when transitive Actio Loc somewhere in the sentence ''guldeleames muitalusaid''


* __AccAhte__ Selects Acc when ''ahte'' is found to the right 

* __AccAux__ Selects Acc if beginning of sentence to the right and aux, not leat,  is to the left. No Acc allowed to the left ''láđđi fertejetne oastit''


* __HabGenAdvl__ Removes Acc; in a habitive adverbial construction with Gen, but only if there is no chans of 0 beeing Nom ''Dat lea áhči''

* __AccIll__ Selects Acc if a strict transitive verb is found to the left and Ill to your right. You are not allowed to be a possible modifier of ill: Pron, Px. ''buktán heasttaid meahccái''




* __Gerundium0__ Selects Acc as the complement of Ger

* __Gerundium1__ Removes Gen if no other object available for the preceding tv-verb


* __Gerundium2__ Selects Acc in front of Ger, but not if it is not HAB-ACTOR/Pron Pers. No transitive verb allowed to the left, exept it it has an object of its own.

* __GerundiumTEST__ Selects Acc 
* __GerundiumTEST__ selects Gen for HAB-ACTOR and Pron Pers in front of Ger, but only if there is an Acc belonging to a transitive to the left








* __NomIfProp__ Removes Acc and Gen when you Prop because you are Nom. To the left is a sg3-verb. Should not hit Prop that are Sem/Plc.

* __NomIfProp2__ Removes Acc and Nom when you are Prop Sem/Plc because you are Gen. To the left is a sg3-verb. To the right is a noun.

* __NomSentFin__ Selects Nom if you are Acc or Gen and EOS is to yoru right. Copulas is found to the left 



!!Nominative and accusative



* __NAr2266__ Selects Nom



* __NAAccEllipsis2__ Selects Acc



* __NAr2288__ Removes Nom




!!Nominative






* __NDr2300__ Selects Nom if Gen immediately to the left. You are N-SG-NOM and to your right is SG3-V ''Du ášši lea dehálaš''



* __NDr2306__ Selects Nom for (N Nom) if to the left is "ohtâ" or "nubbe" ''okta lihtter''



* __NDr2308__ Selects Nom for PROP



!Vocatives, subjects of sentence fragments
* __NDr2309__ Selects Nom

* __NDr2310__ Selects Nom	

* __NDr2311__ Selects Nom




* __NDr2313__ Selects Nom

* __NDr2314__ Selects Nom

* __NDr2315__ Selects Nom


!Nominative in titles and sentence fragments

* __NDr2317__ Selects Nom: A single word is nominative


* __NDr2318__ Selects Nom: A single word with a numeral in front of it is nominative

* __NDr2319__ Selects Nom: An NP head with a genitive modifier is nominative

* __NDr2320__ Selects Nom: A title is nominative if it has a Nom reading at all

* __NDr2321__ Selects Nom: An NP head with an Attr modifier is nominative

* __onlyProp__ Selects Nom



!Nominative after "ko", "mahte", "dugo" and "nugo"


* __NDr2325__ Selects Nom

* __NDr2326__ Selects Nom


* __NumNomgo__ Selects (Num Nom)





!Preverbal subjects

* __NDr2331__ Selects (N Nom)

* __NDr2332__ Selects (Num Nom)

* __NDr2333__ Selects (Num Nom)	

* __NDr2334__ Selects Nom

* __NDr2335__ Selects Nom

* __NDr2336__ selects (N Sg Nom) when 1 SG3-V


* __NDr2338__ Selects (N Sg Nom)	

* __NDr2339__ Selects (N Sg Nom)	



* __NDr2341__ Selects Nom

* __NDr2341__ Selects Nom

* __NDr2343__ Selects (Sg Nom)

* __NDr2345__ Selects Nom

* __NDr2350__ Selects Nom

* __NDr2351__ Selects Nom

* __NDr2357__ Selects (A Pl Nom)

* __NDr2359__ Selects (A Pl Nom)




!Postverbal subjects

* __NDr2360__ Selects Nom

* __NDr2361__ Selects Nom


* __NDr2364__ Selects (Sg Nom)



* __NDr2368__ Selects (N Pl Nom)

* __NDr2370__ Selects (Num Nom)

* __NDr2372__ Selects (Pron Pl Nom)

* __NDr2373__ Selects Nom

* __NDr2375__ Selects Nom

* __NDr2376__ Selects Nom

* __PostVNom__ Selects Nom if a singular third person verb to the left with no Nom to the left of it



* __PostVNomComp__ Selects (N Sg Nom)


!Nominative predicatives


* __NDr2378__ Selects (Sg Nom)

* __ND__ selects Nom if; you are HUMAN and immediately to your right is a place. Leat is to the left, and there is HUMAN or Pers to the left of leat ''Son lei oahpaheaddji Kárášjogas''

* __NDr2379__ Selects (Sg Nom)

* __NDr2380__ Selects (Pl Nom)

* __NDr2382__ Selects (Pl Nom)

* __NDr2383__ Selects Nom

* __NDr2384__ Selects Nom

* __NDr2385__ Selects Nom

!Nominative as objects in existential clauses

* __NDSgr2388__ Selects Nom

* __NDPlr2388__ Selects Nom

* __NDr2389__ Selects Nom

* __NDr2390__ Selects Nom

* __NDr2391__ Selects Nom 

!Nominative in coordination and apposition


* __NDr2399__ Selects Nom  

* __NDr2400__ Selects Nom

* __NDr2401__ Selects Nom

* __NDr2402__ Selects Nom

* __NDr2403__ Selects Nom

* __NDr3529__ Selects Nom	




* __NDr2406__ Selects Nom

* __NDr2407__ Selects Nom

* __NDr2408__ Selects Nom

* __NDr2409__ Selects Nom

* __NDr2411__ Selects Nom

* __NDr2412__ Selects Nom

* __NDr2413__ Selects Nom

* __NomCCNom__ Selects Nom

* __NDr2416__ Selects Nom

* __NDr2417__ Selects Nom

* __NDr2418__ Selects Nom

!Nominative in parallell constructions

* __NDr2422__ Selects Nom

* __NDr2423__ selects Nom if it finds a Nom to the left of CC and to the left of a verb. No verb allowed to the right ''eamit barggai vuođđoskuvllas ja isit fas gymnásas''

* __nomHnoun__ Selects Nom

* __SOV__ Selects Nom in front of an Acc	


!Not nominative
* __NDr2424__ Removes Nom

* __NDr2425__ Removes Nom

* __NDr2426__ Removes Nom, but not Actio 



* __ND__ Removes Nom	





!!Comitative rules

Assuming there is Sg Com / Pl Gen homonymy in Inari Saami. There is, but far more marginal than
for North Saami, the following rules should be revised to account for that.

!NP internal disambiguation of Com

* __PlSg-W__ removes Pl when SG-WORD


* __LocPlur__ removes Sg when PLURALIZER or OASSI OR HEADOFPARTS


* __NumCom__ selects Num Com: guvttiin nieiddain if not plural-noun like: guvttiin heajain

* __ComDemNum1__ selects N Com if there is a Dem or Num or buorre + Com to the left: Exception for plural-nouns  

* __Comburiin__ selects N Com if there is a safe N Com to the right: buriin vugiin  


* __ComCOM-A__ selects Sg Com after COM-A

* __ComComAdv1__ selects Com after COM-ADV or juohke



!Disambiguation based upon verb valency


* __LocLocVL1, LocLocVR__ select Pl Loc if there is a LOC-V


* __LLocAccLocVL__ select Pl Loc if there is a ACC-LOC-V

* __Loc-v__ select Sg Loc if LOC-V to the left in the clause. No mainverb to the right in the clause

!Disambiguation of Com depending on Adv or certain verb or N

* __ComComAdv1__ selects Com for ACTOR OR ACTOR-ROLE after og before COM-ADV 


* __ComComplPl-N__ selects Sg Com for HUMAN, ORGANIZATION, INSTITUTION, STATE, EVENT-TOOL-ACTIVITY, láhka when there is a COM-COMPL-N to the left or right

* __Comoktavuohta__ selects Sg Com when oktavuohta is to the left or right

* __ComDU-NR__ selects Sg Com after Pers dualis: moai áhčiin, munno vieljain


* __ComHumanOrg__ selects HUMAN Sg Com after HUMAN, ORGANIZATION, INSTITUTION

!Animate nouns
* __ComAnimate__ selecst Sg Com if there is an animate to the left, and the noun itself is not a ABSTR-TEXT,  TEXT,  PLACE,  INDUSTRY,  EDUCATION,  INSTITUTION,  ANIMATE

* __ComProp__ selecst Prop Sg Com for person names. Exception for habitive constructions.



!HAB-ACTOR in habitive-constructions

* __LocHab1, LocHab2__ select Pl when HAB-ACTOR


* __LocHab1, LocHab2__ select Pl when HAB-ACTOR


!Disambiguation based upon verb valency 

!COM-V 
* __ComVR, ComVL__ select Com when COM-V




!tools (concrete and abstract)

* __ComTool1, ComTool2, ComToolCoord__ select Com TOOL when ACTIVITY-V, MOVEMENT-V, PLACE-V-V 

* __ComHumanVerbalV__ selects Com HUMAN when VERBAL-ACTIVITY-V or báhcit










!Dynamic-verbs

* __LocdynamicVR, LocdynamicVL__ select Pl Loc if there is a DYNAMIC-V and the noun itself is not a TOOL, ABSTR-TOOL, WRITING-TOOL, CONCEPT, HUMAN, VEHICLE, buorre, Der/NomAc

* __LocdynamicVR__ selects Pl Loc


* __LocdynamicVL__ selects Pl Loc





!Event-tool-actio
Most actio can be both tool and event. 


!PLACE-V

* __ComPlaceV__ select Com ANIMATE, CONCEPT, TOOL, ABSTR-TOOL, EVENT-TOOL-ACTIVITY if there is a PLACE-V

!Movement-verbs

* __ComboahtitR__ selects Sg Com 

* __ComboahtitV–__ selects Sg Com for animate eller pron

* __ComMovemVL__  selects Sg Com over Pl Loc for a movement verb 

* __ComMovemVR__ selects Sg Com over Pl Loc for a movement verb



* __ComDynV__ Dynamic-verbs selects Com when TOOL, ABSTR-TOOL, WRITING-TOOL, CONCEPT, EVENT-TOOL-ACTIVITY


* Dynamic-verb selects Com when HUMAN, but not for HUMAN-SOURCE-VEHICLE-V 


* __ComBody__ Body-activity-verb Selects Com when BODY, for BODY-ACTIVITY-V or VERBAL-ACTIVITY-V



* __LocCop__ selects Pl Loc if event


* Coordination



!Locative and comitative - Disambiguation based upon coordination






!And then we remove the remaining Sg Com analysis





* __KillComSg__ This is the final Com/Loc rule, and it chooses Pl Loc. Remove this for grammar checker.




* __miiPlAcc__ selects acc noun if mii or kii to the left

* __AccTV1NoC__ was Eckhard's late version of AccTV1 without C. We will look at this.

* __AccEOS__ is The Dangerous Rule: it is the last rule before removing all leftover Acc. It only selects Acc if Nom is not an option, dont change this btw, and the end of the sentence is the next one to the right

* __genRel__ removes genitive if Rel to your right ''ožžot olbmot skoviid maid''

* __genAcc__ selects Acc 

* __genNom__ removes Acc


* __DemAcc__ selects Den Acc after the last acc-disambiguation of nouns

* __KillAcc__ Removes Acc if you are Gen 








!!Essive  




!!Finite or not

!Finite

* __r2906__ Sg2 if Sg2


!Not Finite

* __r2824__ 










!Infinitive


!!Indicative or imperative

!!Verbs according to person and number

!Sg1 - First person singular











!Du1 - First person dual 


* __Du1IfDu1__ selects Du1 with a left context Du1 ... ja ... 


* __NoDu1__ removes Du1 if no MOAI or Du1 around.

* __Pl3IfPlSubj__ Pl3 if Pl noun to the left

* __Pl3IfPlSubj__ Pl3 if safe plural (incl pron) to the left



* __Sg2LeftDon__ selects Sg2 in Rel phrase if don to the left of it



* __allPrtSg2__ removes PrtSg2 if PrsPl3


!!Passive
!!Infinitive
!!Present Participle
!!Actio/Perfect Participle 

















!!!NOMEN


!!Case rules


!!Other rules for nouns and pronouns

!!Determiners
!!Adverbs and adjectives


!!Adverbs not nouns


!!!NOUNS





!!Adverb or Participle






!!Variant lemmas



* Remove lemma2 if lemma 1






* __cleanSemClass__ cleans up if a word has more semclasses. This is just a start.







!And then we remove the verbs which didn't get any syntactic tag, in favour of verbs with syntactic tags.

* __realverbX__



* __IfonlyVerb__ selects the FMAINV reading in the cohort

* __IfonlyConNeg__ ConNeg if it is @-FMAINV or @-FAUXV


!__killifVinCohort__ This rule removes all other readings, if there is a mapped V reading in the same cohort. Every case which this goes wrong, should be fixed in mapping rules or previous disrules.

* __TEST__ selects some infinte verb readings in the cohort

* __X__








!!!Removing Err/Orth

Denne regelen fjerner Err/Orth når det er samme lemma, sjøl om morfologien er forskjellig.



* __errsub__ removes err/orth forms





!!!Substitute rules

These 12 substitute rules add the <smn> language code to all words, to govern 
their behaviour in the subsequent cg files. The rules are removed when this
file is ported to Apertium.






