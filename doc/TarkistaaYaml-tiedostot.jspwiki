
Yaml-tiedostot ovat kolmessa hakemistossa:

* test/src/dict-gt-yamls (sanakirja-ortografialle)
* test/src/gt-norm-yamls (viralliselle ortografialle)
* test/src/gt-desc-yamls (deskriptiiviselle analyysiohjelmalle, ei vielä käytössä)

Tiedostot tehdään näin:

# Ensin rakennetaan / tarkistetaan ne dict-gt-yamls-hakemistossa
# Sitten tehdään kopio, poistetaan pistemerkinnän ja apostrofit, ja 
  tallennetaan lopputulos gt-desc-yamls-hakemistoon
  
Dublettien poisto (ks. alh.) pitää myös miellummin tapahtua ensin 
dict-gt-yamls-hakemistossa, ja sen jälkeen kopioidaan ne 
gt-norm-yamls-hakemistoon.


!!!Tehtäviä

!!Tarkistaminen

On erittäin tärkeä, että yaml-tiedostoihin voi luottaa. Ne pitää siis tarkistaa.
Jokaisen hakemiston svn-lokissa käy ilmi, missä tilassa tiedosto on.

On mahdollista tarkistaa, että tiedostot ovat samanlaisia hakemistoissa
{{dict-gt-yamls}} ja {{gt-norm-yamls}}. Jos eivät ole, niin jotain  on pielessä.

!!Dublettien poisto

Paradigmat on nyt saatu kolmen tien kautta

# Jokaisella sanalla on oma tiedosto, esim: N-sajos_gt-norm.yaml
# Sanat on ryhmitelty vartalotyypin mukaan, esim parilliset e-tavut: N-even-e_gt-norm.yaml
# Sanat on otettu taulukoista, esim: N-subst-2tav-reduced-e_gt-norm.yaml

Emme halua samaa paradigmaa monta kertaa. Haluamme miellummin paradigat tyypittäin kuin
yksitellen. Tehtävänä on siis:

* poista yksittäisten sanojen tiedostot, jos niiden paradigmat löytyvät jo ryhmätiedostoista
* ryhmitellä jäljellä olevat yksittäiset sanatiedostot

Dublettien määrä saa esille esim. tarkistamalla, onko identtisiä yksikön nominatiivimuotoja
hakemistossa:

{{{
cat test/src/dict-gt-yamls/*l|grep '+Sg+Nom'|sort|uniq -d
cat test/src/gt-norm-yamls/*l|grep '+Sg+Nom'|sort|uniq -d
}}} 

Näiten komentojan vastaus pitää olla nolla ("ei dubletteja"). Dublettien pitää etsiä,
ja sitten vertailla.

* jos ne eivät ole identtisiä, niin tarkistetaan kumpi on oikein, korjaa, ja säilyttää 
  oikean
* jos ne ovat identtisia, niin poistetaan se paradigma, joka on yksittäisessä 
  tiedostossa tai väärässä tiedostossa)
  
Sanotaan, että komennosta kävi ilmi, että immeel-sana löytyi kahdesti gt-norm-yamls-hakemistosta.
Sitten voi kirjoittaa

{{{
grep immeel test/src/gt-norm-yamls/*
}}}

Silloin ilmestyy kaksi paradigmaa. Tarkista, että ne ovat identtisiä, ja poista
toisen.

!!Leksikon parantaminen yamlin avulla

Idea on seuraava:

Jos perussana, esim. ''äigi'', menee läpi yamlista, niin kaikki leksikon yhdyssanat, joiden 
viimeinen osa on ''äigi'', menevät myös läpi, mikäli niiden vartalon muoto on sama kuin itse
''äigi''-sanan. Tarkistus tapahtuu esim. näin, yksi yaml-tiedosto kerrallaan:

!Kerää kaikki yaml-tiedoston sanat

{{{
grep Ess test/src/dict-gt-yamls/N-lex_aigi_dict-gt-norm.gen.yaml |cut -d"+" -f1|tr -d ' '|sed 's/$/:/'|sed 's/^/^/' > basewords
grep -f basewords src/morphology/stems/nouns.lexc |grep -v AIGI
grep -f basewords src/morphology/stems/nouns.lexc |cut -d " " -f1|sort|see
}}}
  
Ensimmäinen komento kerää kaikki sanat. Toinen tarkistaa, että kaikki kuuluvat samaan leksikkoon, ja kolmas antaa jokaisen sanan vartalon.

!Kerää kaikki sanat, joilla on yaml-tiedoston sanat viimeisenä osana

{{{
grep Ess test/src/dict-gt-yamls/N-lex_aigi_dict-gt-norm.gen.yaml |cut -d"+" -f1|tr -d ' '|sed 's/$/:/' > allwords
grep -f allwords src/morphology/stems/nouns.lexc |grep -v AIGI
grep -f allwords src/morphology/stems/nouns.lexc |cut -d " " -f1|rev|sort|rev|see
}}}

Ensimmäinen komento kerää kaikki yaml-tiedoston sanat, mutta tällä kertaa ilman ^-merkkiä. 
Näin saadaan kaikki sanat, jotka __loppuvat__ yaml-tiedoston sanoihin. Toinen komento
tarkistaa, onko muu leksikko kuin yaml-tiedoston leksikko käytössä (tässä: AIGI). 
Kolmas komento listaa kaikki sanat, mutta käänteisjärjestyksessä. Näin on helpompaa tarkistaa,
että kaikki vartalot ovat samanlaisia.

!Korjaa mahdolliset virheet

Jos joku vartalo poikkeaa yaml-tiedoston vartalosta, sen on korjattava, 
__mutta stems/nouns.lexc-tiedostossa__, eikä näissä generoiduissa tiedostoissa.

Muista kääntää (kirjoittamalla "make") ennen sisääntsekkausta, varmistakseesi, ettei mitään 
ole mennyt teknisesti pieleen.

!Seuraava yaml-tiedosto

Samat komennot toimivat myös seuraavalle yaml-tiedostolle, kun vaan muistaa laittaa
uusi tiedostonnimi ja uusi leksikonnimi (alga, ALGA, ... jne).
Kirjoittamalla "> allwords" luodaan uusi allwords-tiedosto, ja vanhat sanat ovat sitten poissa.


