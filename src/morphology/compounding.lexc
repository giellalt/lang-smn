
LEXICON  Rnoun
               :#  Rreal ; ! pessijÃ¢Å¡moonijd
 +Attr+Err/Orth: K ; ! pessijÃ¢Å¡
                 
LEXICON RAlmostReal    ! lexicalising the 3-part compounds, with the tag ShCmp
         RrealAfterCmpNFlags       ; ! Business as usual: Normal compounds right on to Rreal
 +Cmp#:ðŸ˜±# MiddleNouns ; ! These nouns should not return to themselves, to avoid -jotjotjot-

LEXICON Rreal !!â‰ˆ @CODE@ - This initial recursive/compounding lexicon adds flags to 
          !! control compounding, before going to the real compounding lexicon This is the former R lexicon, renamed to avoid the MiddleNouns loop
 @P.CmpFrst.FALSE@@P.CmpPref.FALSE@@D.CmpLast.TRUE@@D.CmpNone.TRUE@@U.CmpNone.FALSE@@P.CmpOnly.TRUE@ RrealAfterCmpNFlags ; ! Flags to control compounding

LEXICON R
 @P.CmpFrst.FALSE@@P.CmpPref.FALSE@@D.CmpLast.TRUE@@D.CmpNone.TRUE@@U.CmpNone.FALSE@@P.CmpOnly.TRUE@ RAlmostReal ; ! Flags to control compounding

LEXICON RrealAfterCmpNFlags
!          +Cmp#:#  #              ; ! For turning off compounding during testing
          +Cmp#:ðŸ˜±#  nounflag       ;
 +Cmp/Hyph+Cmp#:ðŸ˜±#- nounflag       ;
         +Cmp-#:ðŸ˜±#- ProperNoun-smn ;
         +Cmp-#:ðŸ˜±#- ProperNoun     ;
    +Cmp/SplitR:-  #              ;

LEXICON nounflag
                 NounRoot      ;
 @P.NeedNoun.ON@ VerbRoot      ; !means that the only allowed when @C.NeedNoun@, because of ENDLEX @D.NeedNoun.ON@
 @P.NeedNoun.ON@ AdjectiveRoot ;

LEXICON Rhyph !!â‰ˆ @CODE@ - This initial recursive/compounding lexicon adds flags to
          !! control compounding, before going to the real compounding lexicon
 @P.CmpFrst.FALSE@@P.CmpPref.FALSE@@D.CmpLast.TRUE@@D.CmpNone.TRUE@@U.CmpNone.FALSE@@P.CmpOnly.TRUE@ Rhyph_after_cmp_flags ;

LEXICON Rhyph_after_cmp_flags
      +Cmp-#:-# NounRoot ;
      +Cmp-#:-# Numeral  ; ! NRK-2
 +Cmp/SplitR:-  #        ;

LEXICON RProp !!â‰ˆ @CODE@ - This initial recursive/compounding lexicon adds flags to
          !! control compounding, before going to the real compounding lexicon
 @P.CmpFrst.FALSE@@P.CmpPref.FALSE@@D.CmpLast.TRUE@@D.CmpNone.TRUE@@U.CmpNone.FALSE@@P.CmpOnly.TRUE@ RProp_after_cmp_flags ;

LEXICON RProp_after_cmp_flags                  !!â‰ˆ !!!@CODE@
      +Cmp-#nommÃ¢:Â»Â»Â»-nommÃ¢s  DER-SAS        ; ! JovnÃ¢-nommÃ¢sÃ¢Å¡
     +Cmp-#merkkÃ¢:Â»Â»Â»-merkkÃ¢s DER-SAS        ; ! Saab-merkkÃ¢sÃ¢Å¡
           +Cmp-#:-#          ProperNoun     ;
           +Cmp-#:-#          ProperNoun-smn ;
           +Cmp-#:-#          NounRoot       ;
 +Use/-Spell+Cmp#:ðŸ˜±#         NounRoot       ; ! We don't want Proper-Noun compounds without hyphen in the speller.
      +Cmp/SplitR:-           #              ;

LEXICON RNum !!â‰ˆ @CODE@ - This initial recursive/compounding lexicon adds flags to
          !! control compounding, before going to the real compounding lexicon
 @P.CmpFrst.FALSE@@P.CmpPref.FALSE@@D.CmpLast.TRUE@@D.CmpNone.TRUE@@U.CmpNone.FALSE@@P.CmpOnly.TRUE@ RNum_after_cmp_flags ;

LEXICON RNum_after_cmp_flags
 +Cmp-#:-# Noun ; ! For Num Cmp Noun, vi vil ikke ha Num Cmp Num

